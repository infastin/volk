/* wireplumber-0.5.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Wp", gir_namespace = "Wp", gir_version = "0.5", lower_case_cprefix = "wp_")]
namespace Wp {
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_async_event_hook_get_type ()")]
	public class AsyncEventHook : Wp.InterestEventHook {
		[CCode (has_construct_function = false, type = "WpEventHook*")]
		public AsyncEventHook (string name, string before, string after, GLib.Closure get_next_step, GLib.Closure execute_step);
		[NoAccessorMethod]
		public GLib.Closure execute_step { construct; }
		[NoAccessorMethod]
		public GLib.Closure get_next_step { construct; }
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_client_get_type ()")]
	public class Client : Wp.GlobalProxy, Wp.PipewireObject {
		[CCode (has_construct_function = false)]
		protected Client ();
		public void send_error (uint32 id, int res, string message);
		public void update_properties (owned Wp.Properties updates);
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_conf_get_type ()")]
	public class Conf : GLib.Object {
		[CCode (has_construct_function = false)]
		public Conf (string name, owned Wp.Properties? properties);
		public void close ();
		public unowned string get_name ();
		public Wp.SpaJson? get_section (string section);
		public bool is_open ();
		public bool open () throws GLib.Error;
		[CCode (cname = "wp_conf_new_open", has_construct_function = false)]
		public Conf.open_new (string name, owned Wp.Properties? properties) throws GLib.Error;
		public void parse_pw_context_sections (void* context);
		public int section_update_props (string section, Wp.Properties props);
		public string name { get; construct; }
		[NoAccessorMethod]
		public Wp.Properties properties { owned get; construct; }
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_core_get_type ()")]
	public class Core : Wp.Object {
		[CCode (has_construct_function = false)]
		public Core (GLib.MainContext? context, owned Wp.Conf? conf, owned Wp.Properties? properties);
		public Wp.Core clone ();
		public bool connect ();
		[Version (since = "0.5.6")]
		public bool connect_fd (int fd);
		public void disconnect ();
		public GLib.Object? find_object (GLib.EqualFunc func);
		public Wp.Conf? get_conf ();
		public Wp.Core get_export_core ();
		public unowned GLib.MainContext? get_g_main_context ();
		[Version (since = "0.4.16")]
		public uint32 get_own_bound_id ();
		public Wp.Properties get_properties ();
		public void* get_pw_context ();
		public void* get_pw_core ();
		public uint32 get_remote_cookie ();
		public unowned string get_remote_host_name ();
		public unowned string get_remote_name ();
		public Wp.Properties get_remote_properties ();
		public unowned string get_remote_user_name ();
		public unowned string get_remote_version ();
		[Version (since = "0.4.11")]
		public string? get_vm_type ();
		public void idle_add (out GLib.Source source, owned GLib.SourceFunc function);
		public void idle_add_closure (out GLib.Source source, GLib.Closure closure);
		public void install_object_manager (Wp.ObjectManager om);
		public bool is_connected ();
		public async bool load_component (string? component, string type, Wp.SpaJson? args, string? provides, GLib.Cancellable? cancellable) throws GLib.Error;
		public void register_object (owned GLib.Object obj);
		public void remove_object (GLib.Object obj);
		public async bool sync (GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "0.4.6")]
		public bool sync_closure (GLib.Cancellable? cancellable, GLib.Closure closure);
		public bool test_feature (string feature);
		public void timeout_add (out GLib.Source source, uint timeout_ms, owned GLib.SourceFunc function);
		public void timeout_add_closure (out GLib.Source source, uint timeout_ms, GLib.Closure closure);
		public void update_properties (owned Wp.Properties updates);
		public Wp.Conf conf { owned get; construct; }
		public GLib.MainContext g_main_context { get; construct; }
		public Wp.Properties properties { owned get; construct; }
		public void* pw_context { get; construct; }
		public void* pw_core { get; }
		public signal void connected ();
		public signal void disconnected ();
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_device_get_type ()")]
	public class Device : Wp.GlobalProxy, Wp.PipewireObject {
		[CCode (has_construct_function = false)]
		protected Device ();
		[CCode (has_construct_function = false)]
		public Device.from_factory (Wp.Core core, string factory_name, owned Wp.Properties? properties);
	}
	[CCode (cheader_filename = "wp/wp.h", ref_function = "wp_event_ref", type_id = "wp_event_get_type ()", unref_function = "wp_event_unref")]
	[Compact]
	public class Event {
		[CCode (has_construct_function = false)]
		public Event (string type, int priority, owned Wp.Properties? properties, GLib.Object source, GLib.Object? subject);
		public bool collect_hooks (Wp.EventDispatcher dispatcher);
		public unowned GLib.Cancellable get_cancellable ();
		public unowned GLib.Value? get_data (string key);
		public unowned string get_name ();
		public int get_priority ();
		public Wp.Properties get_properties ();
		public GLib.Object get_source ();
		public GLib.Object get_subject ();
		public Wp.Iterator new_hooks_iterator ();
		public Wp.Event @ref ();
		public void set_data (string key, GLib.Value? data);
		public void stop_processing ();
		public void unref ();
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_event_dispatcher_get_type ()")]
	public class EventDispatcher : GLib.Object {
		[CCode (has_construct_function = false)]
		protected EventDispatcher ();
		public static Wp.EventDispatcher get_instance (Wp.Core core);
		public Wp.Iterator new_hooks_iterator ();
		public void push_event (owned Wp.Event event);
		public void register_hook (Wp.EventHook hook);
		public void unregister_hook (Wp.EventHook hook);
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_event_hook_get_type ()")]
	public abstract class EventHook : GLib.Object {
		[CCode (has_construct_function = false)]
		protected EventHook ();
		public virtual bool finish (GLib.AsyncResult res) throws GLib.Error;
		public unowned string get_name ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_runs_after_hooks ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_runs_before_hooks ();
		public virtual async void run (Wp.Event event, GLib.Cancellable? cancellable);
		public virtual bool runs_for_event (Wp.Event event);
		[NoAccessorMethod]
		public Wp.EventDispatcher dispatcher { owned get; }
		public string name { get; construct; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] runs_after_hooks { get; construct; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] runs_before_hooks { get; construct; }
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_factory_get_type ()")]
	[Version (since = "0.4.5")]
	public class Factory : Wp.GlobalProxy, Wp.PipewireObject {
		[CCode (has_construct_function = false)]
		protected Factory ();
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_feature_activation_transition_get_type ()")]
	public class FeatureActivationTransition : Wp.Transition, GLib.AsyncResult {
		[CCode (has_construct_function = false)]
		protected FeatureActivationTransition ();
		public Wp.ObjectFeatures get_requested_features ();
	}
	[CCode (cheader_filename = "wp/wp.h", has_type_id = false)]
	[Compact]
	public class Global {
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_global_proxy_get_type ()")]
	public class GlobalProxy : Wp.Proxy {
		[CCode (has_construct_function = false)]
		protected GlobalProxy ();
		public bool bind ();
		public Wp.Properties get_global_properties ();
		public uint32 get_permissions ();
		public void request_destroy ();
		[NoAccessorMethod]
		public string factory_name { construct; }
		public Wp.Properties global_properties { owned get; construct; }
		public uint permissions { get; }
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_impl_metadata_get_type ()")]
	public class ImplMetadata : Wp.Metadata {
		[CCode (has_construct_function = false)]
		public ImplMetadata (Wp.Core core);
		[CCode (has_construct_function = false)]
		[Version (since = "0.4.3")]
		public ImplMetadata.full (Wp.Core core, string? name, owned Wp.Properties? properties);
		[NoAccessorMethod]
		public string name { owned get; construct; }
		[NoAccessorMethod]
		public Wp.Properties properties { owned get; construct; }
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_impl_module_get_type ()")]
	[Version (since = "0.4.2")]
	public class ImplModule : GLib.Object {
		[CCode (has_construct_function = false)]
		protected ImplModule ();
		public static Wp.ImplModule? load (Wp.Core core, string name, string? arguments, Wp.Properties? properties);
		[NoAccessorMethod]
		public string arguments { owned get; construct; }
		[NoAccessorMethod]
		public void* core { get; construct; }
		[NoAccessorMethod]
		public string name { owned get; construct; }
		[NoAccessorMethod]
		public Wp.Properties properties { owned get; set; }
		[NoAccessorMethod]
		public void* pw_impl_module { get; }
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_impl_node_get_type ()")]
	public class ImplNode : Wp.Proxy, Wp.PipewireObject {
		[CCode (has_construct_function = false)]
		protected ImplNode ();
		[CCode (has_construct_function = false)]
		public ImplNode.from_pw_factory (Wp.Core core, string factory_name, owned Wp.Properties? properties);
		[CCode (has_construct_function = false)]
		public ImplNode.wrap (Wp.Core core, void* node);
		[NoAccessorMethod]
		public void* pw_impl_node { get; construct; }
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_interest_event_hook_get_type ()")]
	public abstract class InterestEventHook : Wp.EventHook {
		[CCode (has_construct_function = false)]
		protected InterestEventHook ();
		public void add_interest_full (Wp.ObjectInterest interest);
	}
	[CCode (cheader_filename = "wp/wp.h", ref_function = "wp_iterator_ref", type_id = "wp_iterator_get_type ()", unref_function = "wp_iterator_unref")]
	[Compact]
	public class Iterator {
		[CCode (has_construct_function = false)]
		public Iterator (Wp.IteratorMethods methods, size_t user_size);
		public bool fold ([CCode (delegate_target_pos = 2.1)] Wp.IteratorFoldFunc func, ref GLib.Value ret);
		public bool @foreach (Wp.IteratorForeachFunc func);
		public void* get_user_data ();
		public bool next (out GLib.Value item);
		public Wp.Iterator @ref ();
		public void reset ();
		[DestroysInstance]
		public void unref ();
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_link_get_type ()")]
	public class Link : Wp.GlobalProxy, Wp.PipewireObject {
		[CCode (has_construct_function = false)]
		protected Link ();
		[CCode (has_construct_function = false)]
		public Link.from_factory (Wp.Core core, string factory_name, owned Wp.Properties? properties);
		public void get_linked_object_ids (out uint32 output_node, out uint32 output_port, out uint32 input_node, out uint32 input_port);
		[Version (since = "0.4.11")]
		public Wp.LinkState get_state (out unowned string error);
		[NoAccessorMethod]
		public Wp.LinkState state { get; }
		public signal void state_changed (Wp.LinkState object, Wp.LinkState p0);
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_metadata_get_type ()")]
	public class Metadata : Wp.GlobalProxy {
		[CCode (has_construct_function = false)]
		protected Metadata ();
		public void clear ();
		public unowned string find (uint32 subject, string key, out string type);
		public Wp.Iterator new_iterator (uint32 subject);
		public void @set (uint32 subject, string? key, string? type, string? value);
		public signal void changed (uint object, string p0, string p1, string p2);
	}
	[CCode (cheader_filename = "wp/wp.h", ref_function = "wp_metadata_item_ref", type_id = "wp_metadata_item_get_type ()", unref_function = "wp_metadata_item_unref")]
	[Compact]
	public class MetadataItem {
		[Version (since = "0.5.0")]
		public unowned string get_key ();
		[Version (since = "0.5.0")]
		public uint32 get_subject ();
		[Version (since = "0.5.0")]
		public unowned string get_value ();
		[Version (since = "0.5.0")]
		public unowned string get_value_type ();
		[Version (since = "0.5.0")]
		public Wp.MetadataItem @ref ();
		[DestroysInstance]
		[Version (since = "0.5.0")]
		public void unref ();
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_node_get_type ()")]
	public class Node : Wp.GlobalProxy, Wp.PipewireObject {
		[CCode (has_construct_function = false)]
		protected Node ();
		[CCode (has_construct_function = false)]
		public Node.from_factory (Wp.Core core, string factory_name, owned Wp.Properties? properties);
		public uint get_n_input_ports (out uint max);
		public uint get_n_output_ports (out uint max);
		public uint get_n_ports ();
		public Wp.NodeState get_state (out unowned string error);
		public Wp.Port? lookup_port_full (owned Wp.ObjectInterest interest);
		public Wp.Iterator new_ports_filtered_iterator_full (owned Wp.ObjectInterest interest);
		public Wp.Iterator new_ports_iterator ();
		public void send_command (string command);
		[NoAccessorMethod]
		public uint max_input_ports { get; }
		[NoAccessorMethod]
		public uint max_output_ports { get; }
		[NoAccessorMethod]
		public uint n_input_ports { get; }
		[NoAccessorMethod]
		public uint n_output_ports { get; }
		[NoAccessorMethod]
		public Wp.NodeState state { get; }
		public signal void ports_changed ();
		public signal void state_changed (Wp.NodeState object, Wp.NodeState p0);
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_object_get_type ()")]
	public abstract class Object : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Object ();
		[Version (since = "0.4.6")]
		public void abort_activation (string msg);
		public async bool activate (Wp.ObjectFeatures features, GLib.Cancellable? cancellable) throws GLib.Error;
		public void activate_closure (Wp.ObjectFeatures features, GLib.Cancellable? cancellable, owned GLib.Closure closure);
		[NoWrapper]
		public virtual void activate_execute_step (Wp.FeatureActivationTransition transition, uint step, Wp.ObjectFeatures missing);
		[NoWrapper]
		public virtual uint activate_get_next_step (Wp.FeatureActivationTransition transition, uint step, Wp.ObjectFeatures missing);
		public virtual void deactivate (Wp.ObjectFeatures features);
		public Wp.ObjectFeatures get_active_features ();
		public Wp.Core get_core ();
		public uint get_id ();
		public virtual Wp.ObjectFeatures get_supported_features ();
		[Version (since = "0.5.0")]
		public bool test_active_features (Wp.ObjectFeatures features);
		[Version (since = "0.5.0")]
		public bool test_supported_features (Wp.ObjectFeatures features);
		public void update_features (Wp.ObjectFeatures activated, Wp.ObjectFeatures deactivated);
		public uint active_features { get; }
		public Wp.Core core { owned get; construct; }
		public uint id { get; }
		public uint supported_features { get; }
	}
	[CCode (cheader_filename = "wp/wp.h", ref_function = "wp_object_interest_ref", type_id = "wp_object_interest_get_type ()", unref_function = "wp_object_interest_unref")]
	public class ObjectInterest : GLib.Object {
		public ObjectInterest (GLib.Type gtype, ...);
		public void add_constraint (Wp.ConstraintType type, string subject, Wp.ConstraintVerb verb, GLib.Variant? value);
		public bool matches (void* object);
		public Wp.InterestMatch matches_full (Wp.InterestMatchFlags flags, GLib.Type object_type, GLib.Object? object, Wp.Properties? pw_props, Wp.Properties? pw_global_props);
		public Wp.ObjectInterest @ref ();
		[CCode (has_construct_function = false)]
		public ObjectInterest.type (GLib.Type gtype);
		[DestroysInstance]
		public void unref ();
		public bool validate () throws GLib.Error;
		public ObjectInterest.valist (GLib.Type gtype, va_list args);
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_object_manager_get_type ()")]
	public class ObjectManager : GLib.Object {
		[CCode (has_construct_function = false)]
		public ObjectManager ();
		public void add_interest (GLib.Type gtype, ...);
		public void add_interest_full (owned Wp.ObjectInterest interest);
		public uint get_n_objects ();
		public bool is_installed ();
		public GLib.Object? lookup (GLib.Type gtype, ...);
		public GLib.Object? lookup_full (owned Wp.ObjectInterest interest);
		public Wp.Iterator new_filtered_iterator_full (owned Wp.ObjectInterest interest);
		public Wp.Iterator new_iterator ();
		public void request_object_features (GLib.Type object_type, Wp.ObjectFeatures wanted_features);
		[NoAccessorMethod]
		public Wp.Core core { owned get; }
		public signal void installed ();
		public signal void object_added (GLib.Object object);
		public signal void object_removed (GLib.Object object);
		public signal void objects_changed ();
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_plugin_get_type ()")]
	public abstract class Plugin : Wp.Object {
		[CCode (has_construct_function = false)]
		protected Plugin ();
		[NoWrapper]
		public virtual void disable ();
		[NoWrapper]
		public virtual void enable (Wp.Transition transition);
		public static Wp.Plugin? find (Wp.Core core, string plugin_name);
		public unowned string get_name ();
		public string name { get; construct; }
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_port_get_type ()")]
	public class Port : Wp.GlobalProxy, Wp.PipewireObject {
		[CCode (has_construct_function = false)]
		protected Port ();
		public Wp.Direction get_direction ();
	}
	[CCode (cheader_filename = "wp/wp.h", ref_function = "wp_proc_info_ref", type_id = "wp_proc_info_get_type ()", unref_function = "wp_proc_info_unref")]
	[Compact]
	public class ProcInfo {
		public unowned string get_arg (uint index);
		public unowned string get_cgroup ();
		public uint get_n_args ();
		public pid_t get_parent_pid ();
		public pid_t get_pid ();
		public Wp.ProcInfo @ref ();
		[DestroysInstance]
		public void unref ();
	}
	[CCode (cheader_filename = "wp/wp.h", ref_function = "wp_properties_ref", type_id = "wp_properties_get_type ()", unref_function = "wp_properties_unref")]
	[Compact]
	public class Properties {
		public int add (Wp.Properties props);
		public int add_from_dict (void* dict);
		public int add_keys_array (Wp.Properties props, [CCode (array_length = false, array_null_terminated = true)] global::string[] keys);
		public Wp.Properties copy ();
		[CCode (has_construct_function = false)]
		public Properties.copy_dict (void* dict);
		[CCode (cname = "wp_properties_new_copy", has_construct_function = false)]
		public Properties.copy_new (void* props);
		[CCode (has_construct_function = false)]
		public Properties.empty ();
		[DestroysInstance]
		public Wp.Properties ensure_unique_owner ();
		public unowned global::string? @get (global::string key);
		[Version (since = "0.4.10")]
		public uint get_count ();
		[CCode (has_construct_function = false)]
		public Properties.json (Wp.SpaJson json);
		public bool matches (Wp.Properties other);
		public Wp.Iterator new_iterator ();
		public void* peek_dict ();
		public Wp.Properties @ref ();
		public int @set (global::string key, global::string? value);
		public void sort ();
		[CCode (has_construct_function = false)]
		public Properties.string (global::string str);
		[CCode (has_construct_function = false)]
		public Properties.take (void* props);
		public void* to_pw_properties ();
		[DestroysInstance]
		public void unref ();
		[DestroysInstance]
		public void* unref_and_take_pw_properties ();
		public int update (Wp.Properties props);
		public int update_from_dict (void* dict);
		public int update_from_json (Wp.SpaJson json);
		public int update_keys_array (Wp.Properties props, [CCode (array_length = false, array_null_terminated = true)] global::string[] keys);
		[CCode (has_construct_function = false)]
		public Properties.wrap (void* props);
		[CCode (has_construct_function = false)]
		public Properties.wrap_dict (void* dict);
	}
	[CCode (cheader_filename = "wp/wp.h", ref_function = "wp_properties_item_ref", type_id = "wp_properties_item_get_type ()", unref_function = "wp_properties_item_unref")]
	[Compact]
	public class PropertiesItem {
		[Version (since = "0.4.2")]
		public unowned string get_key ();
		[Version (since = "0.4.2")]
		public unowned string get_value ();
		[Version (since = "0.4.2")]
		public Wp.PropertiesItem @ref ();
		[DestroysInstance]
		[Version (since = "0.4.2")]
		public void unref ();
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_proxy_get_type ()")]
	public abstract class Proxy : Wp.Object {
		[CCode (has_construct_function = false)]
		protected Proxy ();
		public uint32 get_bound_id ();
		public unowned string get_interface_type (out uint32 version);
		public void* get_pw_proxy ();
		public void set_pw_proxy (void* proxy);
		public uint bound_id { get; }
		public void* pw_proxy { get; }
		public virtual signal void bound (uint id);
		public virtual signal void error (int seq, int res, string message);
		public virtual signal void pw_proxy_created (void* proxy);
		public virtual signal void pw_proxy_destroyed ();
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_session_item_get_type ()")]
	public abstract class SessionItem : Wp.Object {
		[CCode (has_construct_function = false)]
		protected SessionItem ();
		public virtual bool configure (owned Wp.Properties props);
		[NoWrapper]
		public virtual void disable_active ();
		[NoWrapper]
		public virtual void disable_exported ();
		[NoWrapper]
		public virtual void enable_active (Wp.Transition transition);
		[NoWrapper]
		public virtual void enable_exported (Wp.Transition transition);
		public Wp.Proxy? get_associated_proxy (GLib.Type proxy_type);
		[CCode (vfunc_name = "get_associated_proxy")]
		[NoWrapper]
		public virtual void* get_associated_proxy_fn (GLib.Type proxy_type);
		public uint32 get_associated_proxy_id (GLib.Type proxy_type);
		public Wp.Properties get_properties ();
		public unowned string get_property (string key);
		public static void handle_proxy_destroyed (Wp.Proxy proxy, Wp.SessionItem item);
		public bool is_configured ();
		public static Wp.SessionItem? make (Wp.Core core, string factory_name);
		[DestroysInstance]
		public void register ();
		public void remove ();
		public virtual void reset ();
		public void set_properties (owned Wp.Properties props);
		public Wp.Properties properties { owned get; }
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_settings_get_type ()")]
	public class Settings : Wp.Object {
		[CCode (has_construct_function = false)]
		public Settings (Wp.Core core, string? metadata_name);
		public bool @delete (string name);
		public void delete_all ();
		public static Wp.Settings? find (Wp.Core core, string? metadata_name);
		public Wp.SpaJson? @get (string name);
		public Wp.SpaJson? get_saved (string name);
		public Wp.SettingsSpec? get_spec (string name);
		public Wp.Iterator new_iterator ();
		public bool reset (string name);
		public void reset_all ();
		public bool save (string name);
		public void save_all ();
		public bool @set (string name, Wp.SpaJson value);
		public uintptr subscribe (string pattern, [CCode (scope = "async")] Wp.SettingsChangedCallback callback);
		public uintptr subscribe_closure (string pattern, GLib.Closure? closure);
		public bool unsubscribe (uintptr subscription_id);
		[NoAccessorMethod]
		public string metadata_name { owned get; construct; }
	}
	[CCode (cheader_filename = "wp/wp.h", ref_function = "wp_settings_item_ref", type_id = "wp_settings_item_get_type ()", unref_function = "wp_settings_item_unref")]
	[Compact]
	public class SettingsItem {
		public unowned string get_key ();
		public Wp.SpaJson get_value ();
		public Wp.SettingsItem @ref ();
		[DestroysInstance]
		public void unref ();
	}
	[CCode (cheader_filename = "wp/wp.h", ref_function = "wp_settings_spec_ref", type_id = "wp_settings_spec_get_type ()", unref_function = "wp_settings_spec_unref")]
	[Compact]
	public class SettingsSpec {
		public bool check_value (Wp.SpaJson value);
		public Wp.SpaJson get_default_value ();
		public unowned string get_description ();
		public Wp.SpaJson? get_max_value ();
		public Wp.SpaJson? get_min_value ();
		public Wp.SettingsSpecType get_value_type ();
		public Wp.SettingsSpec @ref ();
		[DestroysInstance]
		public void unref ();
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_si_factory_get_type ()")]
	public class SiFactory : GLib.Object {
		[CCode (has_construct_function = false)]
		protected SiFactory ();
		public virtual Wp.SessionItem @construct (Wp.Core core);
		public static Wp.SiFactory? find (Wp.Core core, string factory_name);
		public unowned string get_name ();
		[CCode (has_construct_function = false)]
		public SiFactory.simple (string factory_name, GLib.Type si_type);
		public string name { get; construct; }
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_simple_event_hook_get_type ()")]
	public class SimpleEventHook : Wp.InterestEventHook {
		[CCode (has_construct_function = false, type = "WpEventHook*")]
		public SimpleEventHook (string name, string before, string after, GLib.Closure closure);
		[NoAccessorMethod]
		public GLib.Closure closure { construct; }
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_spa_device_get_type ()")]
	public class SpaDevice : Wp.Proxy {
		[CCode (has_construct_function = false)]
		protected SpaDevice ();
		[CCode (has_construct_function = false)]
		public SpaDevice.from_spa_factory (Wp.Core core, string factory_name, owned Wp.Properties? properties);
		public GLib.Object get_managed_object (uint id);
		public Wp.Properties get_properties ();
		[Version (since = "0.4.11")]
		public Wp.Iterator new_managed_object_iterator ();
		public void set_managed_pending (uint id);
		public void store_managed_object (uint id, owned GLib.Object? object);
		[CCode (has_construct_function = false)]
		public SpaDevice.wrap (Wp.Core core, void* spa_device_handle, owned Wp.Properties? properties);
		public Wp.Properties properties { owned get; construct; }
		[NoAccessorMethod]
		public void* spa_device_handle { get; construct; }
		public signal void create_object (uint object, string p0, string p1, Wp.Properties p2);
		public signal void object_removed (uint object);
	}
	[CCode (cheader_filename = "wp/wp.h", ref_function = "wp_spa_json_ref", type_id = "wp_spa_json_get_type ()", unref_function = "wp_spa_json_unref")]
	[Compact]
	[Version (since = "0.4.8")]
	public class SpaJson {
		[CCode (has_construct_function = false)]
		public SpaJson.boolean (bool value);
		public Wp.SpaJson copy ();
		[DestroysInstance]
		public Wp.SpaJson ensure_unique_owner ();
		[CCode (has_construct_function = false)]
		public SpaJson.float (global::float value);
		[CCode (has_construct_function = false)]
		[Version (since = "0.5.0")]
		public SpaJson.from_string (global::string json_str);
		[CCode (has_construct_function = false)]
		[Version (since = "0.5.0")]
		public SpaJson.from_stringn (global::string json_str, size_t len);
		public unowned global::string get_data ();
		public size_t get_size ();
		public void* get_spa_json ();
		[CCode (has_construct_function = false)]
		public SpaJson.int (global::int value);
		public bool is_array ();
		public bool is_boolean ();
		public bool is_container ();
		public bool is_float ();
		public bool is_int ();
		public bool is_null ();
		public bool is_object ();
		public bool is_string ();
		public bool is_unique_owner ();
		public Wp.Iterator new_iterator ();
		[CCode (has_construct_function = false)]
		public SpaJson.@null ();
		public bool parse_boolean (out bool value);
		public bool parse_float (out global::float value);
		public bool parse_int (out global::int value);
		public global::string parse_string ();
		public Wp.SpaJson @ref ();
		[CCode (has_construct_function = false)]
		public SpaJson.string (global::string value);
		[Version (since = "0.4.11")]
		public global::string to_string ();
		[DestroysInstance]
		public void unref ();
		[CCode (has_construct_function = false)]
		public SpaJson.wrap (void* json);
		[CCode (has_construct_function = false)]
		[Version (since = "0.5.0")]
		public SpaJson.wrap_string (global::string json_str);
		[CCode (has_construct_function = false)]
		[Version (since = "0.5.0")]
		public SpaJson.wrap_stringn (global::string json_str, size_t len);
	}
	[CCode (cheader_filename = "wp/wp.h", ref_function = "wp_spa_json_builder_ref", type_id = "wp_spa_json_builder_get_type ()", unref_function = "wp_spa_json_builder_unref")]
	[Compact]
	[Version (since = "0.4.8")]
	public class SpaJsonBuilder {
		public void add_boolean (bool value);
		public void add_float (float value);
		public void add_from_string (string json_str);
		public void add_from_stringn (string json_str, size_t len);
		public void add_int (int value);
		public void add_json (Wp.SpaJson json);
		public void add_null ();
		public void add_property (string key);
		public void add_string (string value);
		[CCode (has_construct_function = false)]
		public SpaJsonBuilder.array ();
		public Wp.SpaJson end ();
		[CCode (has_construct_function = false)]
		public SpaJsonBuilder.object ();
		public Wp.SpaJsonBuilder @ref ();
		[DestroysInstance]
		public void unref ();
	}
	[CCode (cheader_filename = "wp/wp.h", ref_function = "wp_spa_json_parser_ref", type_id = "wp_spa_json_parser_get_type ()", unref_function = "wp_spa_json_parser_unref")]
	[Compact]
	[Version (since = "0.4.8")]
	public class SpaJsonParser {
		[CCode (has_construct_function = false)]
		public SpaJsonParser.array (Wp.SpaJson json);
		public void end ();
		public bool get_boolean (out bool value);
		public bool get_float (out float value);
		public bool get_int (out int value);
		public Wp.SpaJson get_json ();
		public bool get_null ();
		public string get_string ();
		[CCode (has_construct_function = false)]
		public SpaJsonParser.object (Wp.SpaJson json);
		public Wp.SpaJsonParser @ref ();
		[CCode (has_construct_function = false)]
		[Version (since = "0.5.0")]
		public SpaJsonParser.undefined (Wp.SpaJson json);
		[DestroysInstance]
		public void unref ();
	}
	[CCode (cheader_filename = "wp/wp.h", ref_function = "wp_spa_pod_ref", type_id = "wp_spa_pod_get_type ()", unref_function = "wp_spa_pod_unref")]
	[Compact]
	public class SpaPod {
		[CCode (has_construct_function = false)]
		public SpaPod.boolean (bool value);
		[CCode (has_construct_function = false)]
		public SpaPod.bytes (void* value, uint32 len);
		public Wp.SpaPod copy ();
		[CCode (has_construct_function = false)]
		public SpaPod.double (global::double value);
		[DestroysInstance]
		public Wp.SpaPod ensure_unique_owner ();
		public bool equal (Wp.SpaPod pod);
		[CCode (has_construct_function = false)]
		public SpaPod.fd (int64 value);
		public Wp.SpaPod filter (Wp.SpaPod filter);
		public bool fixate ();
		[CCode (has_construct_function = false)]
		public SpaPod.float (global::float value);
		[CCode (has_construct_function = false)]
		public SpaPod.fraction (uint32 num, uint32 denom);
		public Wp.SpaPod get_array_child ();
		public bool get_boolean (out bool value);
		public bool get_bytes (out void* value, out uint32 len);
		public Wp.SpaPod get_choice_child ();
		public Wp.SpaIdValue get_choice_type ();
		public bool get_control (out uint32 offset, out global::string ctl_type, out Wp.SpaPod value);
		public bool get_double (out global::double value);
		public bool get_fd (out int64 value);
		public bool get_float (out global::float value);
		public bool get_fraction (out uint32 num, out uint32 denom);
		public bool get_id (out uint32 value);
		public bool get_int (out int32 value);
		public bool get_long (out int64 value);
		public bool get_pointer (out void* value);
		public bool get_property (out global::string key, out Wp.SpaPod value);
		public bool get_rectangle (out uint32 width, out uint32 height);
		public void* get_spa_pod ();
		public Wp.SpaType get_spa_type ();
		public bool get_string (out global::string value);
		[CCode (has_construct_function = false)]
		public SpaPod.id (uint32 value);
		[CCode (has_construct_function = false)]
		public SpaPod.int (int32 value);
		public bool is_array ();
		public bool is_boolean ();
		public bool is_bytes ();
		public bool is_choice ();
		public bool is_control ();
		public bool is_double ();
		public bool is_fd ();
		public bool is_float ();
		public bool is_fraction ();
		public bool is_id ();
		public bool is_int ();
		public bool is_long ();
		public bool is_none ();
		public bool is_object ();
		public bool is_pointer ();
		public bool is_property ();
		public bool is_rectangle ();
		public bool is_sequence ();
		public bool is_string ();
		public bool is_struct ();
		public bool is_unique_owner ();
		[CCode (has_construct_function = false)]
		public SpaPod.long (int64 value);
		public Wp.Iterator new_iterator ();
		[CCode (has_construct_function = false)]
		public SpaPod.none ();
		[CCode (has_construct_function = false)]
		public SpaPod.pointer (global::string type_name, void* value);
		[CCode (has_construct_function = false)]
		public SpaPod.rectangle (uint32 width, uint32 height);
		public Wp.SpaPod @ref ();
		public bool set_boolean (bool value);
		public bool set_double (global::double value);
		public bool set_fd (int64 value);
		public bool set_float (global::float value);
		public bool set_fraction (uint32 num, uint32 denom);
		public bool set_id (uint32 value);
		public bool set_int (int32 value);
		public bool set_long (int64 value);
		public bool set_pod (Wp.SpaPod pod);
		public bool set_pointer (global::string type_name, void* value);
		public bool set_rectangle (uint32 width, uint32 height);
		[CCode (has_construct_function = false)]
		public SpaPod.string (global::string value);
		[DestroysInstance]
		public void unref ();
		[CCode (has_construct_function = false)]
		public SpaPod.wrap (void* pod);
		[CCode (has_construct_function = false)]
		public SpaPod.wrap_const (void* pod);
	}
	[CCode (cheader_filename = "wp/wp.h", ref_function = "wp_spa_pod_builder_ref", type_id = "wp_spa_pod_builder_get_type ()", unref_function = "wp_spa_pod_builder_unref")]
	[Compact]
	public class SpaPodBuilder {
		public void add_boolean (bool value);
		public void add_bytes (void* value, uint32 len);
		public void add_control (uint32 offset, string ctl_type);
		public void add_double (double value);
		public void add_fd (int64 value);
		public void add_float (float value);
		public void add_fraction (uint32 num, uint32 denom);
		public void add_id (uint32 value);
		public void add_int (int32 value);
		public void add_long (int64 value);
		public void add_none ();
		public void add_pod (Wp.SpaPod pod);
		public void add_pointer (string type_name, void* value);
		public void add_property (string key);
		public void add_property_id (uint32 id);
		public void add_rectangle (uint32 width, uint32 height);
		public void add_string (string value);
		[CCode (has_construct_function = false)]
		public SpaPodBuilder.array ();
		[CCode (has_construct_function = false)]
		public SpaPodBuilder.choice (string choice_type);
		public Wp.SpaPod end ();
		[CCode (has_construct_function = false)]
		public SpaPodBuilder.object (string type_name, string id_name);
		public Wp.SpaPodBuilder @ref ();
		[CCode (has_construct_function = false)]
		public SpaPodBuilder.sequence (uint unit);
		[CCode (has_construct_function = false)]
		public SpaPodBuilder.@struct ();
		[DestroysInstance]
		public void unref ();
	}
	[CCode (cheader_filename = "wp/wp.h", ref_function = "wp_spa_pod_parser_ref", type_id = "wp_spa_pod_parser_get_type ()", unref_function = "wp_spa_pod_parser_unref")]
	[Compact]
	public class SpaPodParser {
		public void end ();
		public bool get_boolean (out bool value);
		public bool get_bytes (out void* value, out uint32 len);
		public bool get_double (out double value);
		public bool get_fd (out int64 value);
		public bool get_float (out float value);
		public bool get_fraction (out uint32 num, out uint32 denom);
		public bool get_id (out uint32 value);
		public bool get_int (out int32 value);
		public bool get_long (out int64 value);
		public Wp.SpaPod get_pod ();
		public bool get_pointer (out void* value);
		public bool get_rectangle (out uint32 width, out uint32 height);
		public bool get_string (out string value);
		[CCode (has_construct_function = false)]
		public SpaPodParser.object (Wp.SpaPod pod, string id_name);
		public Wp.SpaPodParser @ref ();
		[CCode (has_construct_function = false)]
		public SpaPodParser.@struct (Wp.SpaPod pod);
		[DestroysInstance]
		public void unref ();
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_state_get_type ()")]
	public class State : GLib.Object {
		[CCode (has_construct_function = false)]
		public State (string name);
		public void clear ();
		public unowned string get_location ();
		public unowned string get_name ();
		public Wp.Properties load ();
		public bool save (Wp.Properties props) throws GLib.Error;
		[Version (since = "0.5.0")]
		public void save_after_timeout (Wp.Core core, Wp.Properties props);
		public string name { get; construct; }
		[NoAccessorMethod]
		public uint timeout { get; set; }
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_transition_get_type ()")]
	public class Transition : GLib.Object, GLib.AsyncResult {
		[CCode (has_construct_function = false)]
		public async Transition (GLib.Type type, GLib.Object? source_object, GLib.Cancellable? cancellable);
		public void advance ();
		[CCode (has_construct_function = false)]
		public Transition.closure (GLib.Type type, GLib.Object? source_object, GLib.Cancellable? cancellable, GLib.Closure? closure);
		[NoWrapper]
		public virtual void execute_step (uint step);
		public static bool finish (GLib.AsyncResult res) throws GLib.Error;
		public bool get_completed ();
		public void* get_data ();
		[NoWrapper]
		public virtual uint get_next_step (uint step);
		public void* get_source_tag ();
		[CCode (cname = "wp_transition_get_source_object")]
		public unowned GLib.Object? get_unowned_source_object ();
		public bool had_error ();
		public void return_error (owned GLib.Error error);
		public void set_data (void* data, GLib.DestroyNotify? data_destroy);
		public void set_source_tag (void* tag);
		public bool completed { get; }
	}
	[CCode (cheader_filename = "wp/wp.h", type_cname = "WpComponentLoaderInterface", type_id = "wp_component_loader_get_type ()")]
	public interface ComponentLoader : GLib.Object {
		[NoWrapper]
		public abstract async void load (Wp.Core core, string component, string type, Wp.SpaJson args, GLib.Cancellable? cancellable);
		[NoWrapper]
		public abstract bool supports_type (string type);
	}
	[CCode (cheader_filename = "wp/wp.h", type_cname = "WpPipewireObjectInterface", type_id = "wp_pipewire_object_get_type ()")]
	public interface PipewireObject : Wp.Proxy {
		public abstract async Wp.Iterator? enum_params (string? id, Wp.SpaPod? filter, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract Wp.Iterator? enum_params_sync (string id, Wp.SpaPod? filter);
		public abstract void* get_native_info ();
		public abstract GLib.Variant? get_param_info ();
		public abstract Wp.Properties get_properties ();
		public unowned string? get_property (string key);
		public Wp.Iterator new_properties_iterator ();
		public abstract bool set_param (string id, uint32 flags, owned Wp.SpaPod param);
		public abstract void* native_info { get; }
		public abstract GLib.Variant param_info { owned get; }
		public abstract Wp.Properties properties { owned get; }
		public signal void params_changed (string object);
	}
	[CCode (cheader_filename = "wp/wp.h", type_cname = "WpSiAcquisitionInterface", type_id = "wp_si_acquisition_get_type ()")]
	public interface SiAcquisition : Wp.SessionItem {
		public abstract async bool acquire (Wp.SiLink acquisitor, Wp.SiLinkable item) throws GLib.Error;
		public abstract void release (Wp.SiLink acquisitor, Wp.SiLinkable item);
	}
	[CCode (cheader_filename = "wp/wp.h", type_cname = "WpSiAdapterInterface", type_id = "wp_si_adapter_get_type ()")]
	public interface SiAdapter : Wp.SessionItem {
		public abstract Wp.SpaPod get_ports_format (out string? mode);
		[Version (since = "0.4.10")]
		public abstract Wp.SiAdapterPortsState get_ports_state ();
		public abstract async bool set_ports_format (owned Wp.SpaPod? format, string? mode) throws GLib.Error;
		public signal void adapter_ports_state_changed (Wp.SiAdapterPortsState object, Wp.SiAdapterPortsState p0);
	}
	[CCode (cheader_filename = "wp/wp.h", type_cname = "WpSiLinkInterface", type_id = "wp_si_link_get_type ()")]
	public interface SiLink : Wp.SessionItem {
		public abstract unowned Wp.SiLinkable get_in_item ();
		public abstract unowned Wp.SiLinkable get_out_item ();
		public abstract Wp.Properties? get_properties ();
		public abstract GLib.Variant get_registration_info ();
		public signal void link_properties_changed ();
	}
	[CCode (cheader_filename = "wp/wp.h", type_cname = "WpSiLinkableInterface", type_id = "wp_si_linkable_get_type ()")]
	public interface SiLinkable : Wp.SessionItem {
		public abstract unowned Wp.SiAcquisition? get_acquisition ();
		public abstract GLib.Variant get_ports (string? context);
	}
	[CCode (cheader_filename = "wp/wp.h", has_type_id = false)]
	public struct IteratorMethods {
		public uint32 version;
		public weak Wp.IteratorMethodsResetFunc reset;
		public weak Wp.IteratorMethodsNextFunc next;
		public weak Wp.IteratorMethodsFinalizeFunc finalize;
	}
	[CCode (cheader_filename = "wp/wp.h", has_type_id = false)]
	public struct LogTopic {
		public weak string topic_name;
		public Wp.LogTopicFlags flags;
		public void init ();
		public void register ();
		public void unregister ();
	}
	[CCode (cheader_filename = "wp/wp.h")]
	[SimpleType]
	public struct ObjectFeatures : uint {
	}
	[CCode (cheader_filename = "wp/wp.h")]
	[SimpleType]
	public struct SpaIdTable {
		public unowned Wp.SpaIdValue? find_value (uint value);
		public unowned Wp.SpaIdValue? find_value_from_name (string name);
		public unowned Wp.SpaIdValue? find_value_from_short_name (string short_name);
		public static unowned Wp.SpaIdTable? from_name (string name);
		public static GLib.Type get_type ();
		public Wp.Iterator new_iterator ();
	}
	[CCode (cheader_filename = "wp/wp.h")]
	[SimpleType]
	public struct SpaIdValue {
		public Wp.SpaType array_get_item_type (out Wp.SpaIdTable table);
		public static Wp.SpaIdValue from_name (string name);
		public static Wp.SpaIdValue from_number (string table_name, uint id);
		public static Wp.SpaIdValue from_short_name (string table_name, string short_name);
		public static GLib.Type get_type ();
		public Wp.SpaType get_value_type (out Wp.SpaIdTable table);
		public unowned string name ();
		public uint number ();
		public unowned string short_name ();
	}
	[CCode (cheader_filename = "wp/wp.h", type_id = "wp_spa_type_get_type ()")]
	[SimpleType]
	public struct SpaType : uint32 {
		public static Wp.SpaType from_name (string name);
		public Wp.SpaIdTable get_object_id_values_table ();
		public Wp.SpaIdTable get_values_table ();
		public bool is_fundamental ();
		public bool is_id ();
		public bool is_object ();
		public unowned string name ();
		public Wp.SpaType parent ();
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_BASE_DIRS_", type_id = "wp_base_dirs_flags_get_type ()")]
	[Flags]
	public enum BaseDirsFlags {
		ENV_CONFIG,
		ENV_DATA,
		ENV_MODULE,
		XDG_CONFIG_HOME,
		XDG_DATA_HOME,
		XDG_CONFIG_DIRS,
		BUILD_SYSCONFDIR,
		XDG_DATA_DIRS,
		BUILD_DATADIR,
		BUILD_LIBDIR,
		FLAG_MODULE,
		FLAG_SUBDIR_WIREPLUMBER,
		CONFIGURATION,
		DATA,
		MODULE
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_CONSTRAINT_TYPE_", type_id = "wp_constraint_type_get_type ()")]
	public enum ConstraintType {
		NONE,
		PW_GLOBAL_PROPERTY,
		PW_PROPERTY,
		G_PROPERTY
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_CONSTRAINT_VERB_", type_id = "wp_constraint_verb_get_type ()")]
	public enum ConstraintVerb {
		EQUALS,
		NOT_EQUALS,
		IN_LIST,
		IN_RANGE,
		MATCHES,
		IS_PRESENT,
		IS_ABSENT
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_CORE_FEATURE_", type_id = "wp_core_features_get_type ()")]
	[Flags]
	public enum CoreFeatures {
		CONNECTED,
		COMPONENTS
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_DIRECTION_", type_id = "wp_direction_get_type ()")]
	public enum Direction {
		INPUT,
		OUTPUT
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_INIT_", type_id = "wp_init_flags_get_type ()")]
	[Flags]
	public enum InitFlags {
		PIPEWIRE,
		SPA_TYPES,
		SET_PW_LOG,
		SET_GLIB_LOG,
		ALL
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_INTEREST_MATCH_", type_id = "wp_interest_match_get_type ()")]
	[Flags]
	public enum InterestMatch {
		NONE,
		GTYPE,
		PW_GLOBAL_PROPERTIES,
		PW_PROPERTIES,
		G_PROPERTIES,
		ALL
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_INTEREST_MATCH_FLAGS_", type_id = "wp_interest_match_flags_get_type ()")]
	[Flags]
	public enum InterestMatchFlags {
		NONE,
		CHECK_ALL
	}
	[CCode (cheader_filename = "wp/wp.h", cname = "WpLibraryErrorEnum", cprefix = "WP_LIBRARY_ERROR_", type_id = "wp_library_error_enum_get_type ()")]
	[GIR (name = "LibraryErrorEnum")]
	public enum LibraryError {
		INVARIANT,
		INVALID_ARGUMENT,
		OPERATION_FAILED,
		SERVICE_UNAVAILABLE
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_LINK_STATE_", type_id = "wp_link_state_get_type ()")]
	public enum LinkState {
		ERROR,
		UNLINKED,
		INIT,
		NEGOTIATING,
		ALLOCATING,
		PAUSED,
		ACTIVE
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_LOG_TOPIC_", type_id = "wp_log_topic_flags_get_type ()")]
	[Flags]
	public enum LogTopicFlags {
		LEVEL_MASK,
		FLAG_STATIC,
		FLAG_INITIALIZED
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_METADATA_FEATURE_", type_id = "wp_metadata_features_get_type ()")]
	[Flags]
	public enum MetadataFeatures {
		DATA
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_NODE_FEATURE_", type_id = "wp_node_features_get_type ()")]
	[Flags]
	public enum NodeFeatures {
		PORTS
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_NODE_STATE_", type_id = "wp_node_state_get_type ()")]
	public enum NodeState {
		ERROR,
		CREATING,
		SUSPENDED,
		IDLE,
		RUNNING
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_PLUGIN_FEATURE_", type_id = "wp_plugin_features_get_type ()")]
	[Flags]
	public enum PluginFeatures {
		ENABLED
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_", type_id = "wp_proxy_features_get_type ()")]
	[Flags]
	public enum ProxyFeatures {
		PROXY_FEATURE_BOUND,
		PIPEWIRE_OBJECT_FEATURE_INFO,
		PIPEWIRE_OBJECT_FEATURE_PARAM_PROPS,
		PIPEWIRE_OBJECT_FEATURE_PARAM_FORMAT,
		PIPEWIRE_OBJECT_FEATURE_PARAM_PROFILE,
		PIPEWIRE_OBJECT_FEATURE_PARAM_PORT_CONFIG,
		PIPEWIRE_OBJECT_FEATURE_PARAM_ROUTE,
		PIPEWIRE_OBJECT_FEATURES_MINIMAL,
		PIPEWIRE_OBJECT_FEATURES_ALL
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_SESSION_ITEM_FEATURE_", type_id = "wp_session_item_features_get_type ()")]
	[Flags]
	public enum SessionItemFeatures {
		ACTIVE,
		EXPORTED
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_SETTINGS_", type_id = "wp_settings_features_get_type ()")]
	[Flags]
	public enum SettingsFeatures {
		LOADED
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_SETTINGS_SPEC_TYPE_", type_id = "wp_settings_spec_type_get_type ()")]
	public enum SettingsSpecType {
		UNKNOWN,
		BOOL,
		INT,
		FLOAT,
		STRING,
		ARRAY,
		OBJECT
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_SI_ADAPTER_PORTS_STATE_", type_id = "wp_si_adapter_ports_state_get_type ()")]
	public enum SiAdapterPortsState {
		NONE,
		CONFIGURING,
		CONFIGURED
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_SPA_DEVICE_FEATURE_", type_id = "wp_spa_device_features_get_type ()")]
	[Flags]
	public enum SpaDeviceFeatures {
		ENABLED
	}
	[CCode (cheader_filename = "wp/wp.h", cprefix = "WP_TRANSITION_STEP_", type_id = "wp_transition_step_get_type ()")]
	public enum TransitionStep {
		NONE,
		ERROR,
		CUSTOM_START
	}
	[CCode (cheader_filename = "wp/wp.h", has_target = false)]
	public delegate bool IteratorFoldFunc (GLib.Value item, GLib.Value ret, void* data);
	[CCode (cheader_filename = "wp/wp.h", has_target = false)]
	public delegate void IteratorForeachFunc (GLib.Value item, void* data);
	[CCode (cheader_filename = "wp/wp.h", has_target = false, has_typedef = false)]
	public delegate void IteratorMethodsFinalizeFunc (Wp.Iterator self);
	[CCode (cheader_filename = "wp/wp.h", has_target = false, has_typedef = false)]
	public delegate bool IteratorMethodsNextFunc (Wp.Iterator self, GLib.Value item);
	[CCode (cheader_filename = "wp/wp.h", has_target = false, has_typedef = false)]
	public delegate void IteratorMethodsResetFunc (Wp.Iterator self);
	[CCode (cheader_filename = "wp/wp.h", has_target = false)]
	public delegate bool RuleMatchCallback (void* data, string action, Wp.SpaJson value) throws GLib.Error;
	[CCode (cheader_filename = "wp/wp.h", instance_pos = 3.9)]
	public delegate void SettingsChangedCallback (Wp.Settings obj, string setting, Wp.SpaJson value);
	[CCode (cheader_filename = "wp/wp.h", cname = "WP_ITERATOR_METHODS_VERSION")]
	public const int ITERATOR_METHODS_VERSION;
	[CCode (cheader_filename = "wp/wp.h", cname = "WP_LOG_LEVEL_TRACE")]
	public const uint LOG_LEVEL_TRACE;
	[CCode (cheader_filename = "wp/wp.h", cname = "WP_OBJECT_FEATURES_ALL")]
	public const Wp.ObjectFeatures OBJECT_FEATURES_ALL;
	[CCode (cheader_filename = "wp/wp.h", cname = "WP_OBJECT_FORMAT")]
	public const string OBJECT_FORMAT;
	[CCode (cheader_filename = "wp/wp.h", cname = "WP_SETTINGS_PERSISTENT_METADATA_NAME_PREFIX")]
	public const string SETTINGS_PERSISTENT_METADATA_NAME_PREFIX;
	[CCode (cheader_filename = "wp/wp.h", cname = "WP_SETTINGS_SCHEMA_METADATA_NAME_PREFIX")]
	public const string SETTINGS_SCHEMA_METADATA_NAME_PREFIX;
	[CCode (cheader_filename = "wp/wp.h", cname = "WP_SPA_TYPE_INVALID")]
	public const Wp.SpaType SPA_TYPE_INVALID;
	[CCode (cheader_filename = "wp/wp.h")]
	[Version (since = "0.5.0")]
	public static string? base_dirs_find_file (Wp.BaseDirsFlags flags, string? subdir, string filename);
	[CCode (cheader_filename = "wp/wp.h")]
	[Version (since = "0.5.0")]
	public static Wp.Iterator base_dirs_new_files_iterator (Wp.BaseDirsFlags flags, string? subdir, string? suffix);
	[CCode (cheader_filename = "wp/wp.h")]
	public static GLib.Quark domain_library_quark ();
	[CCode (cheader_filename = "wp/wp.h")]
	[Version (since = "0.4.12")]
	public static unowned string get_library_api_version ();
	[CCode (cheader_filename = "wp/wp.h")]
	[Version (since = "0.4.12")]
	public static unowned string get_library_version ();
	[CCode (cheader_filename = "wp/wp.h")]
	public static void init (Wp.InitFlags flags);
	[CCode (cheader_filename = "wp/wp.h")]
	public static bool json_utils_match_rules (Wp.SpaJson json, Wp.Properties match_props, Wp.RuleMatchCallback callback) throws GLib.Error;
	[CCode (cheader_filename = "wp/wp.h")]
	public static int json_utils_match_rules_update_properties (Wp.SpaJson json, Wp.Properties props);
	[CCode (cheader_filename = "wp/wp.h")]
	public static Wp.SpaJson json_utils_merge_containers (Wp.SpaJson a, Wp.SpaJson b);
	[CCode (cheader_filename = "wp/wp.h")]
	public static bool log_set_level (string log_level);
	[CCode (cheader_filename = "wp/wp.h")]
	public static GLib.LogWriterOutput log_writer_default (GLib.LogLevelFlags log_level, GLib.LogField fields, size_t n_fields, void* user_data);
	[CCode (cheader_filename = "wp/wp.h")]
	public static Wp.ProcInfo proc_utils_get_proc_info (pid_t pid);
	[CCode (cheader_filename = "wp/wp.h")]
	public static Wp.SpaIdTable spa_dynamic_id_table_register (string name, void* values);
	[CCode (cheader_filename = "wp/wp.h")]
	public static void spa_dynamic_type_deinit ();
	[CCode (cheader_filename = "wp/wp.h")]
	public static void spa_dynamic_type_init ();
	[CCode (cheader_filename = "wp/wp.h")]
	public static Wp.SpaType spa_dynamic_type_register (string name, Wp.SpaType parent, void* values);
	[CCode (cheader_filename = "wp/wp.h")]
	public static void* spa_log_get_instance ();
}
